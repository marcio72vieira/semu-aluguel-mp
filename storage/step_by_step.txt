Sequência:
1 - Instalar aplicação via laravel Docker
    curl -s https://laravel.build/semu-aluguel-mp | bash
2 - Entrar na pasta da aplicação
3 - Modificar arquivo .env
    Alterações necessárias
4 - Modificar arquivo docker-composer.yml
    Alterações necessárias
5 - Subir aplicação
    ./vendor/bin/sail up -d
6 - Ver container
    docker container ls
7 - Atualizar aplicação
    ./vendor/bin/sail composer update
8 - Executar migration
    ./vendor/bin/sail artisan migrate
9 - Acessar banco via MysqlWorkBranch com credenciais do arquivo .env
10 - Acessar aplicação via Browser
     http://localhost:8080/




/////
VIEW PENDENCIA
@extends('layout.admin')

@section('content')
    <div class="px-4 container-fluid">
        <div class="gap-2 mb-1 hstack">
            <h2 class="mt-3">PENDENCIAS - {{ $requerente->nomecompleto }} / CPF: {{ $requerente->cpf }} </h2>
        </div>

        <div class="mb-4 shadow card border-light">
            <div class="gap-2 card-header hstack">
                <span class="p-3 small text-danger"><strong>Campo marcado com * é de preenchimento obrigatório!</strong></span>
            </div>

            {{-- Formulário para anexar documentos --}}
            <div class="card-body">
                <form action="{{ route('documento.store') }}" method="POST" enctype="multipart/form-data" autocomplete="off">
                    @csrf
                    @method('POST')

                    <div class="row">
                        {{-- identificacao do requerente --}}
                        <input type="hidden" name="requerente_id_hidden" id="requerente_id_hidden" value="{{ $requerente->id }}">


                        {{-- url--}}
                        <div class="col-4">
                            <div class="form-group focused">
                                <label class="form-control-label" for="url">Arquivo do Documento (Arquivo do tipo .pdf e máximo de 2Mb)<span class="small text-danger">*</span></label>
                                <input type="file" id="url" style="display:block" name="url" value="{{ old('url') }}">
                                @error('url')
                                    <small style="color: red">{{$message}}</small>
                                @enderror
                            </div>
                        </div>

                        {{-- identificacao da ordem do documento --}}
                        <input type="hidden" name="ordem_hidden" id="ordem_hidden" value="1">

                        {{-- tipodocumento_id --}}
                        <div class="col-6">
                            <div class="form-group focused">
                                <label class="form-control-label" for="tipodocumento_id">Documento<span class="small text-danger">*</span>
                                    {{-- Exibe a modal com os documentos que já foram anexados para guiar o assistente social --}}
                                    <span>
                                        <a href="" data-bs-toggle="modal" data-bs-target="#exampleModal" title="Documentos Anexados">
                                            <i class="fas fa-question-circle"style="font-size: 15px; margin-left: 10px;"></i>
                                        </a>
                                    </span>
                                </label>

                                {{-- {{ $documentosAnexados = $documentos->count() }} de {{ $totalTipoDocumentoAtivo = $tiposdocumentos->count() }} --}}

                                @php
                                    // Arrays para recuperar todos os TIPOSDEDOCUMENTOS(ativos) e DOCUEMNTOS(à medida que forem anexados)
                                    $arr_tiposdocumentos = [];
                                    $arr_documentos = [];
                                @endphp

                                <select name="tipodocumento_id" id="tipodocumento_id" class="form-control select2" required>
                                    <option value="" selected disabled>Escolha...</option>
                                    @foreach($tiposdocumentos  as $tipodocumento)
                                        <option value="{{$tipodocumento->id}}" {{ old('tipodocumento_id') == $tipodocumento->id ? 'selected' : '' }} data-tipodocumento_ordem = "{{ $tipodocumento->ordem }}" style="font-color: red">
                                            {{ $tipodocumento->nome }}
                                        </option>

                                        {{-- Populando arr_tiposdocumentos --}}
                                        @php $arr_tiposdocumentos[] = $tipodocumento->id; @endphp

                                    @endforeach
                                </select>

                                <input type="hidden" name="tipodocumento_ordem_hidden" id="tipodocumento_ordem_hidden"  value="">

                                @error('tipodocumento_id')
                                    <small style="color: red">{{$message}}</small>
                                @enderror
                            </div>
                        </div>

                        <!-- Buttons -->
                        <div class="flex-row col-2 d-md-flex justify-content-end">
                            <div style="margin-top: 25px">
                                <a class="btn btn-outline-secondary me-2" href="{{ route('requerente.index') }}" role="button">Cancelar</a>
                                <button type="submit" class="btn btn-primary " style="width: 95px;"> Anexar </button>
                            </div>
                        </div>

                    </div>
                </form>
            </div>

            {{-- Início Lista de documentos anexados --}}
            <div class="card-body">

                <hr style="border: none; height: 3px; background-color: #545454;">

                <x-alert />

                {{-- Este componente será acionado sempre que houver uma erro de exceção em: store, update ou delete --}}
                <x-errorexception />

                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Documento</th>
                            <th>Observação</th>
                            <th>Visualizar</th>
                            <th>Excluir</th>
                            <th>Documento corrigido</th>
                        </tr>
                    </thead>

                    <tbody>
                        @forelse ($documentos as $documento)
                            <tr>
                                <td>{{ $documento->id }}</th>
                                <td>{{ $documento->tipodocumento->nome }}</th>
                                <td>{{ $documento->observacao }}</th>
                                <td> <a href="{{ asset('/storage/'.$documento->url) }}" target="_blank" title="Visualizar este documento"> <img src="{{ asset('images/documentos2.png') }}" width="30" style="margin-left: 25px;"> </a></td>
                                <td class="flex-row flex-wrap d-md-flex justify-content-start align-content-stretch">
                                    {{-- Só possibilita a exclusão dos documentos pendentes--}}
                                    @if ($documento->aprovado == 0)
                                        <form id="formDelete{{ $documento->id }}" method="POST" action="{{ route('documento.destroy', ['documento' => $documento->id]) }}" style="margin-left: 10px;" title="Excluir este documento">
                                            @csrf
                                            @method('delete')
                                            <button type="submit" class="btn btn-danger btn-sm btnDelete" data-delete-entidade="Documento" data-delete-id="{{ $documento->id }}"  data-value-record="{{ $documento->tipodocumento->nome }}">
                                                <i class="fa-regular fa-trash-can"></i>
                                            </button>
                                        </form>
                                    @else
                                        <button type="button" class="btn btn-outline-secondary btn-sm" title="Documento aprovado!" style="margin-left: 10px;"> <i class="fa-solid fa-ban"></i> </button>
                                    @endif
                                </td>
                                <td>
                                    <form action="{{ route('documento.replace') }}" method="POST" enctype="multipart/form-data" autocomplete="off">
                                        @csrf
                                        @method('POST')
                                        <div class="row">
                                            <div class="col-9">
                                                <input type="file" id="url" style="display:block" name="url" value="{{ old('url') }}">
                                            </div>
                                            <div class="col-1">
                                                <button type="submit" class="btn btn-primary btn-sm"><i class="fa-solid fa-right-left"></i></button>
                                            </div>
                                        </div>
                                    </form>
                                </td>
                            </tr>

                            {{-- Populando arr_documentos, à medida que forem sendo anexados --}}
                             @php $arr_documentos[] = $documento->tipodocumento_id; @endphp

                        @empty
                            <div class="alert alert-danger" role="alert">Nenhum documento com pendência encontrado! </div>
                        @endforelse
                    </tbody>
                </table>

                {{-- Transformando os arrays em string // {{ implode(",", $arr_tiposdocumentos) }} <br> {{ implode(",", $arr_documentos) }} --}}
                {{-- Comparando quantidade de elementos das coleções: @if ($documentos->count() >= $tiposdocumentos->count()) ...faz alguma coisa.. @endif --}}

                {{-- Removendo os elementos duplicados do array documentos, para que seu tamanho, seja comparado com a quantidade de elemntos do array tiposdocumntos --}}
                @php $arr_documentos = array_unique($arr_documentos); @endphp
            </div>
            {{-- fim Lista de documentos anexados--}}

            <div class="row">
                <div class="col-2 offset-10">
                    {{-- Butão deve ser exibido quando todos os documentos exigidos estiverem anexados
                         O campo status (pendente) tabela "requerente" deverá ser atualizado para "em análise"
                         Desabilitar todas as operações ref. ao requerente, ou seja, desabillitar: nem cadastrar, nem editar, nem consultar, anexos e documentos


                    --}}
                    {{-- Só exibe o formulário com o botão se todos os documentos exigidos forem anexados --}}
                    @if (count($arr_documentos) ==  count($arr_tiposdocumentos))
                        <form action="{{ route('documento.submeteranalise', ['requerente' => $requerente->id]) }}" method="POST">
                            @csrf
                            @method('PUT')
                            <button type="submit" class="btn btn-success me-2" style="margin-left: 10px; margin-bottom: 15px; width: 200px;"><i class="fa-solid fa-user-check" style="margin-right: 5px;"></i> Submeter Análise</button>
                        </form>
                    @endif
                </div>
            </div>

        </div>
    </div>

    {{-- inicio modal --}}
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title fs-5" id="exampleModalLabel">DOCUMENTOS ANEXADOS</h2>
                </div>

                <div class="modal-body">
                    <table class="table table-sm">
                        <tbody>
                            @foreach($tiposdocumentos  as $tipodocumento)
                                <tr>
                                    <td>
                                        <span style="font-size: 12px;">{{$tipodocumento->nome}}</span>
                                    </td>
                                    <td>
                                        @foreach ($documentos as $documento )
                                            @if ($documento->tipodocumento_id == $tipodocumento->id)
                                                <b><i class='mr-2 fas fa-check text-success' style="font-size: 30px;"></i></b>
                                            @endif
                                        @endforeach
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>
    {{-- fim modal --}}

@endsection

@section('scripts')
    <script>
        // Atribui ao campo hidden o valor da ordem do tipo de documento atraves da propriedade "data-"
        // Essa ordem é necessária para compor o nome do arquivo físico (Ex: doc_01_tempo.pdf, doc_02_tempo.pdf, ... doc_10_tempo.pdf)
        // que é de fundamental importância para a ordem de mesclagem dos arquivos pdfs.
        // A mesclagem tem que ser na ordem do check-list fornecido pelo cliente ou qualquer outra ordem que o mesmo definir.
        // O valor do campo "tipodocumento_ordem_hidden" é fornecido pela propriedade data-, já que no select, o único valor que
        // pode ser passado para o processamento da requisição através da request, é o value da "option".
        // Resumindo. Uma forma de passar vários valores para o processamento da requisição, é através da criação de campos do
        // do tipo "hidden" e definindo seus valores através das propriedades data-, como no script abaixo.
        $("#tipodocumento_id").on("change", function() {

            let tipodocumentoordem = $(this).find(':selected').data('tipodocumento_ordem')
                $(this).siblings("#tipodocumento_ordem_hidden").val(tipodocumentoordem);

        });
    </script>

@endsection


//// Como recuperr uma posição de um explode diretamente
<!DOCTYPE html>
<html>
<body>

<?php
$str = "Hello world. It's a beautiful day.";
print_r (explode(" ",$str));
echo "<br>";
echo (explode(" ",$str)[0]);
?>

</body>
</html>



///// TABELA DOCUMENTOS ORIGINAL
 public function up(): void
    {
        Schema::create('documentos', function (Blueprint $table) {
            $table->id();
            $table->smallInteger('ordem');                                          // Ordem com que deve ser apresentado para o servidor da SEMU na hora do CheckList
            $table->string('url');
            $table->foreignId('tipodocumento_id')->constrained('tipodocumentos')->onDelete('cascade');
            $table->boolean('aprovado')->default(0);
            $table->text('observacao')->nullable();
            $table->boolean('corrigido')->default(0);
            $table->foreignId('requerente_id')->constrained()->onDelete('cascade'); // Através destte campo, devido ao seu relacionamento é possível sabe quem é o Assistente Social que cadstrou os docuemntos
            $table->foreignId('user_id')->constrained()->onDelete('cascade');       // Através destte campo, devido ao seu relacionamento é possível sabe quem é o Servidor da Semu responsável pelo checklist
            $table->timestamps();
        });
    }

/// Exibe o nome do Assistente social e o nome do Servidor da SEMU que realizou a analise dos documentos se analisou. Se não, não mosta nada
 {{-- Se os documentos já foram analisados por alguém exibe seu nome, caso contrário, não exibe nada --}}
@foreach ($requerente->documentos as $documento) 
    {{-- $documento->user->nomecompleto --}}
    @if ($documento->user->nomecompleto == $requerente->user->nomecompleto)

    @else
        {{ $documento->user->nomecompleto }}
    @endif
    @if ($loop->first) @break @endif 
@endforeach

// QUERYS
// Obtendo a quantidade de requerente por sexobiologico no mês e ano corrente
// No MySQL original 
SELECT COUNT(id) as quantidade, sexobiologico FROM requerentes WHERE MONTH(created_at) = 12 GROUP BY sexobiologico  ORDER BY COUNT(id) DESC;
// No Laravel (FACADES DB)
$records = DB::select("SELECT COUNT(id) as quantidade, sexobiologico as sexo FROM requerentes WHERE MONTH(created_at) = $mes_corrente  AND YEAR(created_at) = $ano_corrente GROUP BY sexobiologico ORDER BY COUNT(id) DESC");


// Instalando e utilizando o Spatie Simple Excel
1- Instalando
marcio@vaio:~/projetosdocker/semu-aluguel-mp$ ./vendor/bin/sail composer require spatie/simple-excel

2- Utilizando:
    no Controller inportar:
    use Spatie\SimpleExcel\SimpleExcelWriter;

    No método,  utilizar conforme consta no método:  public function gerarexcel(Request $request)
    


/// MIGRATE ANTIGA TABELA PROCESSO 
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Adicionar todos os campos para necessários para quaisquer pesquisas para a confecção do dashboard. Não esquecer de calcular a idade das requerentes com base na data de nascimento
        // Falta acrescentar os campos data de nascimeno da requerene, o campo calculado idade (com base na data de nascimento) (bairro_id e bairro a ser implementado)

        Schema::create('processos', function (Blueprint $table) {
            $table->id();
            $table->string('url');

            // Campos referente ao cadastro da Requerente
            $table->integer('requerente_id')->nullable();
            $table->string('nomecompleto')->nullable();
            $table->string('sexobiologico')->nullable();
            $table->date('nascimento')->nullable();
            $table->string('naturalidade')->nullable();
            $table->string('nacionalidade')->nullable();
            
            $table->string('rg')->nullable();
            $table->string('orgaoexpedidor')->nullable();
            $table->string('cpf')->nullable();
            $table->string('banco')->nullable();
            $table->string('agencia')->nullable();
            $table->string('conta')->nullable();
            $table->boolean('contaespecifica')->nullable();

            $table->integer('comunidade_id')->nullable();
            $table->string('comunidade')->nullable();
            $table->string('outracomunidade')->nullable();
            $table->integer('racacor_id')->nullable();
            $table->string('racacor')->nullable();
            $table->string('outraracacor')->nullable();
            $table->integer('identidadegenero_id')->nullable();
            $table->string('identidadegenero')->nullable();
            $table->string('outraidentidadegenero')->nullable();
            $table->integer('orientacaosexual_id')->nullable();
            $table->string('orientacaosexual')->nullable();
            $table->string('outraorientacaosexual')->nullable();
            $table->integer('deficiente_id')->nullable();
            $table->string('deficiente')->nullable();
            $table->string('deficiencia')->nullable();
            
            $table->integer('escolaridade_id')->nullable();
            $table->string('escolaridade')->nullable();
            $table->string('profissao')->nullable();
            $table->integer('estadocivil_id')->nullable();
            $table->string('estadocivil')->nullable();

            $table->integer('regional_id')->nullable();
            $table->string('regional')->nullable();
            $table->integer('municipio_id')->nullable();
            $table->string('municipio')->nullable();
            $table->integer('tipounidade_id')->nullable();
            $table->string('tipounidade')->nullable();
            $table->integer('unidadeatendimento_id')->nullable();
            $table->string('unidadeatendimento')->nullable();
            $table->string('endereco')->nullable();
            $table->string('numero')->nullable();
            $table->string('complemento')->nullable();
            $table->string('bairro')->nullable();
            $table->string('cep')->nullable();
            $table->string('foneresidencial')->nullable();
            $table->string('fonecelular')->nullable();
            $table->string('email')->nullable();
            $table->date('datacadastro')->nullable();           //data de cadastro da requerente $requetente->created_at

            // campos referente aos detalhes do requerimento
            $table->string('processojudicial')->nullable();
            $table->string('orgaojudicial')->nullable();
            $table->string('comarca')->nullable();
            $table->integer('prazomedidaprotetiva')->nullable();
            $table->date('dataconcessaomedidaprotetiva')->nullable();
            $table->integer('medproturgcaminhaprogoficial_id')->nullable();
            $table->boolean('medproturgcaminhaprogoficial')->nullable();
            $table->integer('medproturgafastamentolar_id')->nullable();
            $table->boolean('medproturgafastamentolar')->nullable();
            $table->integer('riscmortvioldomesmoradprotegsigilosa_id')->nullable();
            $table->boolean('riscmortvioldomesmoradprotegsigilosa')->nullable();
            $table->integer('riscvidaaguardmedproturg_id')->nullable();
            $table->boolean('riscvidaaguardmedproturg')->nullable();
            $table->integer('relatodescomprmedproturgagressor_id')->nullable();
            $table->boolean('relatodescomprmedproturgagressor')->nullable();
            $table->integer('sitvulnerabnaoconsegarcardespmoradia_id')->nullable();
            $table->boolean('sitvulnerabnaoconsegarcardespmoradia')->nullable();
            $table->integer('temrendfamiliardoissalconvivagressor_id')->nullable();
            $table->boolean('temrendfamiliardoissalconvivagressor')->nullable();
            $table->integer('paiavofilhonetomaiormesmomunicipresid_id')->nullable();
            $table->boolean('paiavofilhonetomaiormesmomunicipresid')->nullable();
            $table->string('parentesmesmomunicipioresidencia')->nullable();
            $table->boolean('filhosmenoresidade')->nullable();
            $table->integer('trabalhaougerarenda_id')->nullable();
            $table->boolean('trabalhaougerarenda')->nullable();
            $table->decimal('valortrabalhorenda',12, 2)->default(0)->nullable();
            $table->integer('temcadunico_id')->nullable();
            $table->string('temcadunico')->nullable();
            $table->decimal('valortemcadunico',12,2)->nullable();
            $table->integer('teminteresformprofisdesenvolvhabilid_id')->nullable();
            $table->boolean('teminteresformprofisdesenvolvhabilid')->nullable();
            $table->integer('apresentoudocumentoidentificacao_id')->nullable();
            $table->boolean('apresentoudocumentoidentificacao')->nullable();
            $table->integer('cumprerequisitositensnecessarios_id')->nullable();
            $table->boolean('cumprerequisitositensnecessarios')->nullable();

            // campos referene o Assistente Social e ao Servidor da SEMU
            $table->integer('assistente_id')->nullable();       // $requerente->user->id funcionario da semu
            $table->string('assistente')->nullable();           // $requerente->user->nomecompleto
            $table->integer('funcionariosemu_id')->nullable();  //$documento->user->id
            $table->string('funcionario')->nullable();          //$documento->user->nomecompleto

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('processos');
    }
};
